name: Windows RDP via ZeroTier (With Apps and Taskbar Clean, No IDM)

on:
  workflow_dispatch:
    inputs:
      zt_network_id:
        description: "ZeroTier Network ID"
        required: true
      rdp_user:
        description: "RDP Username"
        required: false
        default: "ZtUser"
      rdp_pass:
        description: "RDP Password"
        required: false
        default: "ZtPass@123"
      runtime_minutes:
        description: "Session duration in minutes (max 355)"
        required: false
        default: "355"

jobs:
  rdp:
    runs-on: windows-2022
    timeout-minutes: 370

    steps:
      - name: Install ZeroTier (if missing)
        shell: pwsh
        run: |
          $exe = "C:\Program Files\ZeroTier\One\zerotier-one_x64.exe"
          if (-not (Test-Path $exe)) {
            $url = "https://download.zerotier.com/RELEASES/1.14.0/dist/ZeroTier%20One.msi"
            $msi = "$env:TEMP\zerotier-one.msi"
            Invoke-WebRequest -Uri $url -OutFile $msi -UseBasicParsing
            Start-Process msiexec.exe -ArgumentList "/i `"$msi`" /quiet /norestart" -Wait
          }

      - name: Find ZeroTier CLI Path
        id: ztcli
        shell: pwsh
        run: |
          $paths = @(
            "C:\Program Files\ZeroTier\One\zerotier-cli.bat",
            "C:\Program Files (x86)\ZeroTier\One\zerotier-cli.bat"
          )
          foreach ($p in $paths) {
            if (Test-Path $p) {
              echo "cli=$p" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
              break
            }
          }

      - name: Join ZeroTier Network
        shell: pwsh
        run: |
          $cli = "${{ steps.ztcli.outputs.cli }}"
          & $cli join ${{ github.event.inputs.zt_network_id }}
          Start-Sleep -Seconds 6
          & $cli listnetworks

      - name: Create Clean RDP User & Enable RDP
        shell: pwsh
        run: |
          $u = "${{ github.event.inputs.rdp_user }}"
          $p = "${{ github.event.inputs.rdp_pass }}"
          $sec = ConvertTo-SecureString $p -AsPlainText -Force
          if (-not (Get-LocalUser -Name $u -ErrorAction SilentlyContinue)) {
            New-LocalUser -Name $u -Password $sec -AccountNeverExpires
            Add-LocalGroupMember -Group Administrators -Member $u
            Add-LocalGroupMember -Group "Remote Desktop Users" -Member $u
          } else {
            Set-LocalUser -Name $u -Password $sec -AccountNeverExpires
            Enable-LocalUser -Name $u
          }
          Set-ItemProperty "HKLM:\System\CurrentControlSet\Control\Terminal Server" -Name fDenyTSConnections -Value 0
          Enable-NetFirewallRule -DisplayGroup "Remote Desktop" | Out-Null

      - name: Install Telegram and Speedtest GUI
        shell: pwsh
        run: |
          # Telegram Desktop
          Invoke-WebRequest -Uri "https://telegram.org/dl/desktop/win64" -OutFile "$env:TEMP\TelegramSetup.exe"
          Start-Process -FilePath "$env:TEMP\TelegramSetup.exe" -ArgumentList "/SILENT" -Wait
          # Speedtest by Ookla (GUI, latest)
          Invoke-WebRequest -Uri "https://install.speedtest.net/app/windows/latest/speedtestbyookla_x64.msi" -OutFile "$env:TEMP\speedtest.msi"
          Start-Process msiexec.exe -ArgumentList "/i `"$env:TEMP\speedtest.msi`" /quiet /norestart" -Wait

      - name: Unpin Microsoft Edge from Taskbar (RDP User)
        shell: pwsh
        run: |
          $u = "${{ github.event.inputs.rdp_user }}"
          $TaskbarPath = "C:\Users\$u\AppData\Roaming\Microsoft\Internet Explorer\Quick Launch\User Pinned\TaskBar"
          if (Test-Path $TaskbarPath) {
            Get-ChildItem $TaskbarPath | Where-Object { $_.Name -like "*Edge*.lnk" } | Remove-Item -Force
          }

      - name: Show ZeroTier IP
        shell: pwsh
        run: |
          ipconfig

      - name: Keep RDP Session Alive
        shell: pwsh
        run: |
          $runtime = [int]"${{ github.event.inputs.runtime_minutes }}"
          if ($runtime -gt 355) { $runtime = 355 }
          $end = (Get-Date).AddMinutes($runtime)
          while ((Get-Date) -lt $end) {
            $left = [math]::Ceiling(($end - (Get-Date)).TotalMinutes)
            Write-Host "RDP alive... ($left min left)"
            Start-Sleep -Seconds 60
          }
          
